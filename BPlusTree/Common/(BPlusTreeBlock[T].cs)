using System.Runtime;

namespace System.Collections.Generic
{
    /// <summary>
    /// 
    /// </summary>
    internal sealed class BPlusTreeBlock< T > : IEnumerable< T > /*, IComparable< BPlusTreeBlock< T > >*/ 
        //---where T : IComparable< T >
    {
        /// <summary>
        /// 
        /// </summary>
        internal sealed class BlockComparer : IComparer< BPlusTreeBlock< T > >
        {
            public static BlockComparer Inst = new BlockComparer();
            public int Compare( BPlusTreeBlock< T > x, BPlusTreeBlock< T > y )
            {
                return (x._SL.CompareOtherWith4_BPlusTreeBlock( y._SL ));

                /*
                var x_sl = x._SL;
                var y_sl = y._SL;

                if ( x_sl.Count != 0 )
                {
                    if ( y_sl.Count != 0 )
                    {
                        return (x._Comparer.Compare( x_sl.Max, y_sl.Min ));
                    }
                    return (1);
                }
                if ( y_sl.Count != 0 )
                {
                    return (-1);
                }
                return (0);
                */
            }
        }


        private SortedList< T > _SL;
        private BPlusTreeBlock< T > _Next;
        //---private IComparer< T > _Comparer;

        /*public IComparer< T > Comparer
        {
            get { return (_Comparer); }
        }*/

        [TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]
        public int CompareWith4_SortedBlockList( T value )
        {
            return (_SL.CompareWith4_SortedBlockList( value ));

            /*
            var d = _Comparer.Compare( _SL.Min, value );
            if ( 0 <= d ) //value < Min
                return (d);
            //d < 0 
            return (_Comparer.Compare( _SL.Max, value ));
            */
        }

        [TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]
        public int CompareWith4_SortedBlockSet( T value )
        {
            return (_SL.CompareWith4_SortedBlockSet( value ));

            /*
            var d = _Comparer.Compare( _SL.Min, value );
            if ( 0 <= d ) //value < Min
                return (d);

            d = _Comparer.Compare( _SL.Max, value );
            return (0 <= d ? 0 : d); //if {value <= Max} => {0 <= d} => 0, else => d;
            */
        }

        private BPlusTreeBlock( /*IComparer< T > comparer*/ )
        {
            //---_Comparer = comparer;
        }
        public BPlusTreeBlock( IComparer< T > comparer, int capacity, T t )
        {
            //---_Comparer = comparer;
            _SL = new SortedList< T >( comparer, capacity, t );
        }

        public bool Add( T t )
        {
#if DEBUG
            if ( _SL.Capacity == _SL.Count ) throw (new InvalidOperationException());
#endif
            return (_SL.TryAdd( t ));
        }
        public bool TryAdd( T t )
        {
            return (_SL.TryAdd( t ));
        }
        /*public bool Contains( T t )
        {
            return (_SL.Contains( t ));
        }*/
        public BPlusTreeBlock< T > SplitInTwo()
        {
            var nextSL = _SL.SplitInTwo();
            _Next = new BPlusTreeBlock< T >( /*_Comparer*/ ) { _SL = nextSL, _Next = _Next };
            return (_Next);
        }
        public int IndexOfKeyCore( T t )
        {
            return (_SL.IndexOfKeyCore( t ));
        }
        public T this[ int index ]
        {
            get { return (_SL[ index ]); }
        }

        public T Min
        {
            get { return (_SL.Min); }
        }
        public T Max
        {
            get { return (_SL.Max); }
        }
        public int Count
        {
            get { return (_SL.Count); }    
        }
        public BPlusTreeBlock< T > Next
        {
            get { return (_Next); }    
        }
        public bool IsFull
        {
            get { return (_SL.Capacity == _SL.Count); }
        }

        public void Trim()
        {
            _SL.Trim();
        }

        public IEnumerator< T > GetEnumerator()
        {
            return (_SL.GetEnumerator());
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return (GetEnumerator());
        }

        /*public int CompareTo( BPlusTreeBlock< T > other )
        {
            if ( _SL.Count != 0 )
            {
                if ( other._SL.Count != 0 )
                {
                    return (_Comparer.Compare( _SL.Max, other._SL.Min ));
                    //---return (_SL.Max.CompareTo( other._SL.Min ));
                }
                return (1);
            }
            if ( other._SL.Count != 0 )
            {
                return (-1);
            }
            return (0);
        }*/

#if DEBUG
        public override string ToString()
        {
            return (_SL.ToString());

            //---return (_SL.ToString() + ((_Next != null) ? (" => \r\n" + _Next.ToString()) : string.Empty));
        }
#endif
    }
}
